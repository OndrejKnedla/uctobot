
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  whatsappPhone: 'whatsappPhone',
  email: 'email',
  name: 'name',
  companyName: 'companyName',
  ico: 'ico',
  dic: 'dic',
  address: 'address',
  city: 'city',
  zipCode: 'zipCode',
  country: 'country',
  isVatPayer: 'isVatPayer',
  vatFrequency: 'vatFrequency',
  accountingType: 'accountingType',
  whatsappVerified: 'whatsappVerified',
  whatsappOtp: 'whatsappOtp',
  whatsappOtpExpiry: 'whatsappOtpExpiry',
  lastWhatsappActivity: 'lastWhatsappActivity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  plan: 'plan',
  status: 'status',
  price: 'price',
  trialEndsAt: 'trialEndsAt',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  cancelledAt: 'cancelledAt',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  isFoundingMember: 'isFoundingMember',
  lockedPrice: 'lockedPrice',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  stripePaymentIntentId: 'stripePaymentIntentId',
  stripeInvoiceId: 'stripeInvoiceId',
  paidAt: 'paidAt',
  failedAt: 'failedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  invoiceNumber: 'invoiceNumber',
  variableSymbol: 'variableSymbol',
  contactId: 'contactId',
  subtotal: 'subtotal',
  vatAmount: 'vatAmount',
  total: 'total',
  currency: 'currency',
  exchangeRate: 'exchangeRate',
  issuedDate: 'issuedDate',
  dueDate: 'dueDate',
  paymentDate: 'paymentDate',
  status: 'status',
  note: 'note',
  internalNote: 'internalNote',
  whatsappMessageId: 'whatsappMessageId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceItemScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  description: 'description',
  quantity: 'quantity',
  unit: 'unit',
  unitPrice: 'unitPrice',
  vatRate: 'vatRate',
  total: 'total',
  categoryId: 'categoryId'
};

exports.Prisma.ExpenseScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  expenseNumber: 'expenseNumber',
  contactId: 'contactId',
  description: 'description',
  subtotal: 'subtotal',
  vatAmount: 'vatAmount',
  total: 'total',
  vatRate: 'vatRate',
  currency: 'currency',
  exchangeRate: 'exchangeRate',
  expenseDate: 'expenseDate',
  paymentDate: 'paymentDate',
  type: 'type',
  status: 'status',
  categoryId: 'categoryId',
  aiProcessed: 'aiProcessed',
  aiExtractedData: 'aiExtractedData',
  whatsappMessageId: 'whatsappMessageId',
  bankTransactionId: 'bankTransactionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BankAccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  bankName: 'bankName',
  accountNumber: 'accountNumber',
  bankCode: 'bankCode',
  iban: 'iban',
  swift: 'swift',
  currency: 'currency',
  balance: 'balance',
  apiEnabled: 'apiEnabled',
  apiProvider: 'apiProvider',
  apiToken: 'apiToken',
  lastSync: 'lastSync',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BankTransactionScalarFieldEnum = {
  id: 'id',
  bankAccountId: 'bankAccountId',
  transactionId: 'transactionId',
  amount: 'amount',
  currency: 'currency',
  type: 'type',
  date: 'date',
  description: 'description',
  variableSymbol: 'variableSymbol',
  constantSymbol: 'constantSymbol',
  specificSymbol: 'specificSymbol',
  counterpartAccount: 'counterpartAccount',
  counterpartName: 'counterpartName',
  counterpartBankCode: 'counterpartBankCode',
  suggestedCategoryId: 'suggestedCategoryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  type: 'type',
  taxDeductible: 'taxDeductible',
  vatRate: 'vatRate',
  taxCode: 'taxCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  name: 'name',
  companyName: 'companyName',
  ico: 'ico',
  dic: 'dic',
  email: 'email',
  phone: 'phone',
  address: 'address',
  city: 'city',
  zipCode: 'zipCode',
  country: 'country',
  aresVerified: 'aresVerified',
  aresData: 'aresData',
  bankAccount: 'bankAccount',
  bankCode: 'bankCode',
  iban: 'iban',
  note: 'note',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  fileName: 'fileName',
  fileUrl: 'fileUrl',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  type: 'type',
  expenseId: 'expenseId',
  ocrProcessed: 'ocrProcessed',
  ocrData: 'ocrData',
  ocrConfidence: 'ocrConfidence',
  whatsappMessageId: 'whatsappMessageId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaxReportScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  period: 'period',
  vatOutput: 'vatOutput',
  vatInput: 'vatInput',
  vatPayable: 'vatPayable',
  income: 'income',
  expenses: 'expenses',
  taxBase: 'taxBase',
  taxAmount: 'taxAmount',
  status: 'status',
  submittedAt: 'submittedAt',
  paidAt: 'paidAt',
  data: 'data',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  scheduledFor: 'scheduledFor',
  sentViaWhatsApp: 'sentViaWhatsApp',
  whatsappMessageId: 'whatsappMessageId',
  read: 'read',
  readAt: 'readAt',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.VatFrequency = exports.$Enums.VatFrequency = {
  MONTHLY: 'MONTHLY',
  QUARTERLY: 'QUARTERLY'
};

exports.AccountingType = exports.$Enums.AccountingType = {
  TAX_RECORDS: 'TAX_RECORDS',
  ACCOUNTING: 'ACCOUNTING'
};

exports.PlanType = exports.$Enums.PlanType = {
  MONTHLY: 'MONTHLY',
  YEARLY: 'YEARLY'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  TRIAL: 'TRIAL',
  ACTIVE: 'ACTIVE',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED',
  PAST_DUE: 'PAST_DUE'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  SUCCEEDED: 'SUCCEEDED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  DRAFT: 'DRAFT',
  SENT: 'SENT',
  PAID: 'PAID',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED'
};

exports.ExpenseType = exports.$Enums.ExpenseType = {
  INVOICE: 'INVOICE',
  RECEIPT: 'RECEIPT',
  CASH: 'CASH'
};

exports.ExpenseStatus = exports.$Enums.ExpenseStatus = {
  UNPAID: 'UNPAID',
  PAID: 'PAID',
  CANCELLED: 'CANCELLED'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  CREDIT: 'CREDIT',
  DEBIT: 'DEBIT'
};

exports.CategoryType = exports.$Enums.CategoryType = {
  INCOME: 'INCOME',
  EXPENSE: 'EXPENSE'
};

exports.ContactType = exports.$Enums.ContactType = {
  CUSTOMER: 'CUSTOMER',
  SUPPLIER: 'SUPPLIER',
  BOTH: 'BOTH'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  INVOICE: 'INVOICE',
  RECEIPT: 'RECEIPT',
  CONTRACT: 'CONTRACT',
  OTHER: 'OTHER'
};

exports.TaxReportType = exports.$Enums.TaxReportType = {
  VAT: 'VAT',
  INCOME_TAX: 'INCOME_TAX',
  SOCIAL: 'SOCIAL',
  HEALTH: 'HEALTH'
};

exports.TaxReportStatus = exports.$Enums.TaxReportStatus = {
  DRAFT: 'DRAFT',
  SUBMITTED: 'SUBMITTED',
  PAID: 'PAID'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  PAYMENT_REMINDER: 'PAYMENT_REMINDER',
  TAX_DEADLINE: 'TAX_DEADLINE',
  INVOICE_OVERDUE: 'INVOICE_OVERDUE',
  SUBSCRIPTION: 'SUBSCRIPTION',
  SYSTEM: 'SYSTEM'
};

exports.Prisma.ModelName = {
  User: 'User',
  Subscription: 'Subscription',
  Payment: 'Payment',
  Invoice: 'Invoice',
  InvoiceItem: 'InvoiceItem',
  Expense: 'Expense',
  BankAccount: 'BankAccount',
  BankTransaction: 'BankTransaction',
  Category: 'Category',
  Contact: 'Contact',
  Document: 'Document',
  TaxReport: 'TaxReport',
  Notification: 'Notification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
